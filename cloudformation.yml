---

AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create AWS resoruces for the Splunk DDSS Restore Toolkit.

Parameters:

  service:
    Type: String
    Description: Service name used in tagging AWS resources.
    Default: splunk-ddss-restore-tooklit

  stage:
    Type: String
    Description: Used to distinguish between stages of an environment (dev, test, prod, stage, etc).  Only used in AWS resource tagging.
    Default: dev

  contact:
    Description: Used to identify a contact for the resources created in this stack.  Only used in AWS resource tagging.  As an example, this could be an email address or username.
    Type: String
    Default: ""

  vpcID:
    Description: VPC the EC2 instance will reside in.
    Type: AWS::EC2::VPC::Id

  splunkAMIImageID:
    Type: "AWS::EC2::Image::Id"
    Description: "The Splunk AMI that will be used when setting up the Splunk EC2 instance."

  splunkInstanceType:
    Type: String
    Description: "Instance type and size of the Splunk EC2 instance."
    Default: "c6i.2xlarge"

  splunkInstanceKeypair:
    Type: String
    Description: "Name of the EC2 keypair to set up on the Splunk server."

  splunkInstanceSubnetID:
    Description: "Subnet that will be used for Splunk EC2 instance."
    Type: AWS::EC2::Subnet::Id

  splunkInstanceEBSVolumeSize:
    Type: Number
    Description: "Size of the EBS volume Splunk instance will launch with in GB."
    Default: 500
    MinValue: 50
    MaxValue: 64000


Resources:

# Resources for EC2 instance
  splunkInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${service}-securityGroup"
      GroupDescription: !Sub "Security group for ${service} server"
      VpcId: !Ref "vpcID"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: "Splunk UI"
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      Tags:
      - Key: "Name"
        Value: !Sub "${service}-securityGroup"
      - Key: service
        Value: !Ref service
      - Key: contact
        Value: !Ref contact

  splunkBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-splunk-${service}-bucket"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
            - Id: !Sub "${service}-bucket-cleanupPolicy"
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 1
              Status: Enabled
      Tags:
      - Key: "Name"
        Value: !Sub "${AWS::AccountId}-splunk-${service}-bucket"
      - Key: service
        Value: !Ref service
      - Key: contact
        Value: !Ref contact

  splunkInstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:Get*
          - s3:Put*
          - s3:List*
          - s3:Delete*
          Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-splunk-${service}-bucket/*"
        - Effect: Allow
          Action:
          - s3:ListAllMyBuckets
          - s3:HeadBucket
          - s3:ListBucket
          Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-splunk-${service}-bucket/"
      ManagedPolicyName: !Sub "${service}-instancePolicy"

  splunkInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com"
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref splunkInstancePolicy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      RoleName: !Sub "${service}-instanceRole"

  splunkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref splunkInstanceRole
      InstanceProfileName: !Sub "${service}-instanceProfile"

  splunkInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            Encrypted: True
            VolumeSize: !Ref splunkInstanceEBSVolumeSize
            VolumeType: "gp3"
      IamInstanceProfile: !Ref splunkInstanceProfile
      ImageId: !Ref splunkAMIImageID
      InstanceType: !Ref splunkInstanceType
      KeyName: !Ref splunkInstanceKeypair
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet:
            - !Ref splunkInstanceSecurityGroup
          SubnetId: !Ref splunkInstanceSubnetID
      Tags:
      - Key: "Name"
        Value: !Sub "${service}-instance"
      - Key: service
        Value: !Ref service
      - Key: contact
        Value: !Ref contact

Outputs:
  splunkInstanceSecurityGroupID:
    Value: !Ref splunkInstanceSecurityGroup
  splunkBucketArn:
    Value: !GetAtt splunkBucket.Arn
  splunkInsancePolicyID:
    Value: !Ref splunkInstancePolicy
  splunkInstanceRoleArn:
    Value: !GetAtt splunkInstanceRole.Arn
  splunkInstanceProfileArn:
    Value: !GetAtt splunkInstanceProfile.Arn
  splunkInstanceID:
    Value: !Ref splunkInstance